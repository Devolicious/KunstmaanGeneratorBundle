<?php

namespace Kunstmaan\GeneratorBundle\Generator;

use Kunstmaan\GeneratorBundle\Helper\GeneratorUtils;
use Symfony\Component\HttpKernel\Bundle\Bundle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\DependencyInjection\Container;

/**
 * Generates tests to test the admin backend generated by the default-site generator
 */
class AdminTestsGenerator extends KunstmaanGenerator
{

    /**
     * @var Filesystem
     */
    private $filesystem;

    /**
     * @var string
     */
    private $skeletonDir;

    private $fullSkeletonDir;

    /**
     * @param Filesystem $filesystem  The filesytem
     * @param string     $skeletonDir The skeleton directory
     */
    public function __construct(Filesystem $filesystem, $skeletonDir)
    {
        $this->filesystem = $filesystem;
        $this->skeletonDir = $skeletonDir;
        $this->fullSkeletonDir = GeneratorUtils::getFullSkeletonPath($skeletonDir);
    }

    /**
     * @param Bundle $bundle
     */
    public function generate(Bundle $bundle)
    {
        // This is needed so the renderFile method will search for the files
        // in the correct location
        $this->setSkeletonDirs(array($this->fullSkeletonDir));

        $parameters = array(
            'namespace'         => $bundle->getNamespace(),
            'bundle'            => $bundle
        );

        $this->executeStep('Generating Behat Tests', function() use ($bundle, $parameters) {
            $this->generateBehatTests($bundle, $parameters);
        });

        $this->executeStep('Generating Unit Tests', function() use ($bundle) {
            $this->generateUnitTests($bundle);
        });
    }

    /**
     * @param Bundle $bundle
     */
    public function generateUnitTests(Bundle $bundle)
    {
        $dirPath = $bundle->getPath();
        $fullSkeletonDir = $this->skeletonDir . '/Tests';
    }

    /**
     * @param Bundle $bundle
     * @param array  $parameters
     */
    public function generateBehatTests(Bundle $bundle, array $parameters)
    {
        $dirPath = sprintf("%s/Features", $bundle->getPath());
        $skeletonDir = sprintf("%s/Features", $this->fullSkeletonDir);

        // First copy all the content
        $this->filesystem->mirror($this->fullSkeletonDir, $bundle->getPath());

        // Now render the Context files to replace the namespace etc.
        if ($handle = opendir($skeletonDir . "/Context")) {

            while (false !== ($entry = readdir($handle))) {
                // Check to make sure we skip hidden folders
                // And we render the files ending in .php
                if (substr($entry, 0, 1) != '.' && substr($entry, -strlen(".php")) === ".php") {
                    $this->renderFile("/Features/Context/" . $entry, $dirPath . "/Context/" . $entry, $parameters);
                }
            }

            closedir($handle);
        }
    }
}
